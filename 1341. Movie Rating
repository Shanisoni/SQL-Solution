(
    SELECT 
        A1.name AS results
    FROM 
        Users AS A1
    LEFT JOIN 
        MovieRating AS A2 
        ON A1.user_id = A2.user_id
    GROUP BY 
        A2.user_id
    ORDER BY 
        COUNT(A2.user_id) DESC, 
        A1.name
    LIMIT 1
)

UNION ALL

(
    SELECT 
        A3.title AS results
    FROM 
        Movies AS A3
    LEFT JOIN 
        MovieRating AS A2 
        ON A2.movie_id = A3.movie_id
    WHERE 
        EXTRACT(YEAR_MONTH FROM created_at) = 202002
    GROUP BY 
        A3.movie_id
    ORDER BY 
        AVG(rating) DESC, 
        A3.title
    LIMIT 1
);














üîç THE FULL QUERY (Two parts joined by UNION ALL)

(SELECT A1.name AS results 
 FROM Users AS A1 
 LEFT JOIN MovieRating AS A2 ON A1.user_id = A2.user_id 
 GROUP BY A2.user_id 
 ORDER BY COUNT(A2.user_id) DESC, A1.name 
 LIMIT 1)

UNION ALL

(SELECT A3.title AS results 
 FROM Movies AS A3 
 LEFT JOIN MovieRating AS A2 ON A2.movie_id = A3.movie_id 
 WHERE EXTRACT(YEAR_MONTH FROM created_at) = 202002 
 GROUP BY A3.movie_id 
 ORDER BY AVG(rating) DESC, A3.title  
 LIMIT 1)

üß© TABLE SCHEMA AND SAMPLE DATA
üë§ Users table
user_id	name
1	Alice
2	Bob
3	Charlie
üé¨ Movies table
movie_id	title
1	Avengers
2	Joker
3	Parasite
‚≠ê MovieRating table
movie_id	user_id	rating	created_at
1	1	5	2020-02-20
2	1	3	2020-01-05
3	2	4	2020-02-15
2	2	5	2020-02-17
1	3	4	2020-03-10
üîπ PART 1: Finding the Most Active User
üëâ Goal: Find the user who gave the most number of ratings.
1Ô∏è‚É£ SELECT A1.name AS results

    SELECT is the keyword to specify what columns we want in the output.

    A1.name gets the name of the user (from Users table).

    AS results renames the output column to a generic name (results), so both parts of the UNION ALL return the same column name.

üß† Reason: Required for UNION ALL ‚Äì all SELECTs must return the same number of columns with compatible data types.
2Ô∏è‚É£ FROM Users AS A1

    Users is the table of all users.

    We alias it as A1 to write shorter references like A1.name.

3Ô∏è‚É£ LEFT JOIN MovieRating AS A2 ON A1.user_id = A2.user_id

    We're joining the Users table with the MovieRating table based on the user_id column.

    A LEFT JOIN means:

        Include all users, even if they haven't rated any movie (A2 columns will be NULL in that case).

üîç Intermediate Join Result:
name	movie_id	rating	created_at
Alice	1	5	2020-02-20
Alice	2	3	2020-01-05
Bob	3	4	2020-02-15
Bob	2	5	2020-02-17
Charlie	1	4	2020-03-10
4Ô∏è‚É£ GROUP BY A2.user_id

    Grouping by user ID means we will calculate aggregates (like count) per user.

üß† Why group by A2.user_id?

    Because after the join, we want to count how many ratings each user has given.

üìå Counts:
user_id	count(A2.user_id)
1	2
2	2
3	1
5Ô∏è‚É£ ORDER BY COUNT(A2.user_id) DESC, A1.name

    First, sort by descending count: so the most active user comes first.

    Second, if two users have the same number of ratings, sort alphabetically by name.

üìå In our data:

    Alice ‚Üí 2 ratings

    Bob ‚Üí 2 ratings

    Charlie ‚Üí 1 rating

Since Alice and Bob tie ‚Üí we pick Alice due to alphabetical order.
6Ô∏è‚É£ LIMIT 1

    Only show the top result.

‚úÖ Output of PART 1:

| results |
|---------|
| Alice   |

üîπ PART 2: Highest Average Rated Movie in February 2020
üëâ Goal: Find the movie with the highest average rating in Feb 2020.
1Ô∏è‚É£ SELECT A3.title AS results

    Return the movie title as output.

    Rename as results to be compatible with part 1 (for UNION ALL).

2Ô∏è‚É£ FROM Movies AS A3

    Use the Movies table, alias as A3.

3Ô∏è‚É£ LEFT JOIN MovieRating AS A2 ON A2.movie_id = A3.movie_id

    Join movies with their ratings.

Why LEFT JOIN?

    So that even movies without ratings in Feb 2020 appear (just in case, although filtered later).

4Ô∏è‚É£ WHERE EXTRACT(YEAR_MONTH FROM created_at) = 202002

    This filters only the rows where the rating was given in February 2020.

    EXTRACT(YEAR_MONTH FROM created_at):

        From 2020-02-20 ‚Üí gives 202002

        From 2020-03-10 ‚Üí gives 202003

üìå Ratings in Feb 2020:
movie_id	rating
1	5
2	5
3	4
5Ô∏è‚É£ GROUP BY A3.movie_id

    We need to compute average rating per movie.

6Ô∏è‚É£ ORDER BY AVG(rating) DESC, A3.title

    Sort by:

        Highest average rating

        Lexicographically smallest title in case of tie

üìå Calculated Averages:
movie	avg_rating
Avengers	5.0
Joker	5.0
Parasite	4.0

Tie between Avengers and Joker ‚Üí pick Avengers.
7Ô∏è‚É£ LIMIT 1

    Only keep top-rated movie.

‚úÖ Output of PART 2:

| results  |
|----------|
| Avengers |

üîÅ UNION ALL
Why UNION ALL?

    Combines both results into a single column/table.

    Keeps all rows, even if duplicate values exist (not needed here, but a good habit).

| results  |
|----------|
| Alice    |
| Avengers |

‚úÖ FINAL OUTPUT
results
Alice
Avengers
üß† KEY SQL CONCEPTS USED (Explained in Full)
Keyword/Syntax	Purpose
SELECT	Chooses which columns to display
AS	Renames column/table/alias
FROM	Declares which table we‚Äôre selecting from
LEFT JOIN	Combines two tables while keeping unmatched left table rows
ON	Specifies join condition
GROUP BY	Allows aggregate functions (COUNT, AVG) per group
ORDER BY	Sorts output by columns, ASC (default) or DESC
COUNT()	Counts rows (non-null values by default)
AVG()	Calculates average of a column
EXTRACT(YEAR_MONTH FROM ...)	Gets year and month as single number (e.g., 202002)
WHERE	Filters rows before grouping
LIMIT	Restricts number of output rows
UNION ALL	Combines results from multiple SELECTs, keeping duplicates
